# This file is the main config file for this service.
# Docs: https://docs.serverless.com
# Example: https://serverless.com/framework/docs/providers/aws/guide/serverless.yml/

service: photato-website-backend

# The app and org for use with https://dashboard.serverless.com
app: photato-website
org: veszelovszki

# Basic setup
provider:
  name: aws
  runtime: nodejs12.x
  stage: production
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow # Allow replicated lambdas to create logs â€“ note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource:
        - 'arn:aws:logs:us-east-1:633371514237:log-group:/aws/lambda/photato-website-backend-production-adminGetAllMessages:*'
        - 'arn:aws:logs:us-east-1:633371514237:log-group:/aws/lambda/photato-website-backend-production-getSignedUrl:*'
        - 'arn:aws:logs:us-east-1:633371514237:log-group:/aws/lambda/photato-website-backend-production-validateSignedUrl:*'
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
        - s3:ListBucket
        - s3:ListBucketVersions
      Resource:
        - 'arn:aws:s3:::${self:custom.config.photoBucket.name}'
        - 'arn:aws:s3:::${self:custom.config.photoBucket.name}/*'
  cfnRole: arn:aws:iam::633371514237:role/cloudformation-role # Role to assume to build the tech stack
  logs:
    restApi: true

# These are the lambda functions and their location in this repo, plus also how to call them from Lambda@Edge
functions:
  getVersion:
    handler: index.handler
    memorySize: 128
    timeout: 5
    events:
      - http:
          path: 'version'
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  getSignedUrl:
    handler: index.handler
    memorySize: 128
    timeout: 5
    lambdaAtEdge:
      distribution: PhotatoCloudFront
      eventType: viewer-request # Help: https://docs.aws.amazon.com/lambda/latest/dg/lambda-edge.html
      pathPattern: '/get-signed-url'
  validateSignedUrl:
    handler: index-cloudfront.handler
    memorySize: 128
    timeout: 5
    lambdaAtEdge:
      distribution: PhotatoCloudFront
      eventType: viewer-request
  adminGetAllMessages:
    handler: index.handler
    memorySize: 128
    timeout: 5
    events:
      - http:
          path: 'messages/get-all-messages'
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

# Plugins for extended functions, such as Lambda@Edge use
plugins:
  - '@silvermine/serverless-plugin-cloudfront-lambda-edge' # This allows using Lamda@Edge features of CloudFront.
  # More info: https://github.com/silvermine/serverless-plugin-cloudfront-lambda-edge

# Any custom settings may come here. They can be referenced as ${self:custom.XXX}
custom:
  stage: ${opt:stage, self:provider.stage}
  config: ${file(./serverless-config.json)} # Lambda@Edge doesn't support environment variables, so we put them in this JSON

# The Resources the functions use. Raw AWS CloudFormation resource templates go in here.
resources:
  Resources:
    PhotoBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.config.photoBucket.name}
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        VersioningConfiguration:
          Status: Enabled
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET, PUT]
              AllowedOrigins: ['*']
              Id: CORSRuleId1
              MaxAge: '3600'
    CloudFrontLogBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.config.cloudFrontLogBucket.name}
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        VersioningConfiguration:
          Status: Enabled
    PhotatoCloudFront:
      Type: AWS::CloudFront::Distribution
      DependsOn:
        - PhotoBucket
        - CloudFrontLogBucket
      Properties:
        DistributionConfig:
          Enabled: true
          Comment: '${self:custom.stage}-${self:service}'
          Logging:
            IncludeCookies: 'false'
            Bucket: ${self:custom.config.cloudFrontLogBucket.name}.s3.amazonaws.com
            Prefix: photato-cloudfront
          PriceClass: PriceClass_All # TODO: Maybe PriceClass_100 would be better? No idea, but I'm on the free tier ATM
          HttpVersion: http2
          IPV6Enabled: true
          ViewerCertificate:
            CloudFrontDefaultCertificate: true
          CustomErrorResponses:
            - ErrorCachingMinTTL: 0
              ErrorCode: 400
            - ErrorCachingMinTTL: 0
              ErrorCode: 403
            - ErrorCachingMinTTL: 0
              ErrorCode: 404
            - ErrorCachingMinTTL: 0
              ErrorCode: 405
            - ErrorCachingMinTTL: 0
              ErrorCode: 414
            - ErrorCachingMinTTL: 0
              ErrorCode: 416
            - ErrorCachingMinTTL: 0
              ErrorCode: 500
            - ErrorCachingMinTTL: 0
              ErrorCode: 501
            - ErrorCachingMinTTL: 0
              ErrorCode: 502
            - ErrorCachingMinTTL: 0
              ErrorCode: 503
            - ErrorCachingMinTTL: 0
              ErrorCode: 504
          Origins:
            - DomainName: ${self:custom.config.photoBucket.name}.s3.amazonaws.com
              Id: S3Origin
              S3OriginConfig: {}
          DefaultCacheBehavior:
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            DefaultTTL: 0
            MaxTTL: 0
            MinTTL: 0
            ForwardedValues:
              QueryString: 'true'
              Cookies:
                Forward: none
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
          CacheBehaviors:
            - TargetOriginId: S3Origin
              ViewerProtocolPolicy: redirect-to-https
              DefaultTTL: 0
              MaxTTL: 0
              MinTTL: 0
              ForwardedValues:
                QueryString: 'false'
                Cookies:
                  Forward: none
              PathPattern: '/version'
              AllowedMethods:
                - GET
            - TargetOriginId: S3Origin
              ViewerProtocolPolicy: redirect-to-https
              DefaultTTL: 0
              MaxTTL: 0
              MinTTL: 0
              ForwardedValues:
                QueryString: 'false'
                Cookies:
                  Forward: none
              PathPattern: '/get-signed-url'
              AllowedMethods:
                - GET
                - OPTIONS
                - HEAD
            - TargetOriginId: S3Origin
              ViewerProtocolPolicy: redirect-to-https
              DefaultTTL: 0
              MaxTTL: 0
              MinTTL: 0
              ForwardedValues:
                QueryString: 'true'
                Cookies:
                  Forward: none
              PathPattern: '/get-all-messages'
              AllowedMethods:
                - GET
                - OPTIONS
                - HEAD
